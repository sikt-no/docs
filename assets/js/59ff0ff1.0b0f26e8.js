"use strict";(self.webpackChunkdocs_sikt_no=self.webpackChunkdocs_sikt_no||[]).push([[5151],{3905:(e,n,r)=>{r.d(n,{Zo:()=>k,kt:()=>p});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=t.createContext({}),d=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},k=function(e){var n=d(e.components);return t.createElement(o.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,k=i(e,["components","mdxType","originalType","parentName"]),m=d(r),p=a,v=m["".concat(o,".").concat(p)]||m[p]||g[p]||s;return r?t.createElement(v,l(l({ref:n},k),{},{components:r})):t.createElement(v,l({ref:n},k))}));function p(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,l=new Array(s);l[0]=m;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<s;d++)l[d]=r[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4950:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var t=r(7462),a=(r(7294),r(3905));const s={title:"Vurderinger ved anskaffelse av IT-tjenester og -systemer",sidebar_position:2},l=void 0,i={unversionedId:"datadeling/veiledere/annet/anskaffelse/vurderinger",id:"datadeling/veiledere/annet/anskaffelse/vurderinger",title:"Vurderinger ved anskaffelse av IT-tjenester og -systemer",description:"Som systemeier, prosjektleder, innkj\xf8per og applikasjonsforvalter er det flere",source:"@site/docs/datadeling/veiledere/annet/anskaffelse/vurderinger.md",sourceDirName:"datadeling/veiledere/annet/anskaffelse",slug:"/datadeling/veiledere/annet/anskaffelse/vurderinger",permalink:"/docs/datadeling/veiledere/annet/anskaffelse/vurderinger",draft:!1,editUrl:"https://github.com/sikt-no/docs/tree/master/docs/datadeling/veiledere/annet/anskaffelse/vurderinger.md",tags:[],version:"current",lastUpdatedAt:1699252628,formattedLastUpdatedAt:"Nov 6, 2023",sidebarPosition:2,frontMatter:{title:"Vurderinger ved anskaffelse av IT-tjenester og -systemer",sidebar_position:2},sidebar:"datadeling",previous:{title:"Veileder for anskaffelser av IT-tjenester",permalink:"/docs/datadeling/veiledere/annet/anskaffelse/"},next:{title:"Hjelpesp\xf8rsm\xe5l ved anskaffelser av IT-tjenester",permalink:"/docs/datadeling/veiledere/annet/anskaffelse/hjelpesporsmal"}},o={},d=[{value:"Moderne og gammeldags programvare",id:"moderne-og-gammeldags-programvare",level:2},{value:"1. Provisjonering",id:"1-provisjonering",level:3},{value:"2. Integrasjonsteknologi",id:"2-integrasjonsteknologi",level:3},{value:"3. Galvanisk skille",id:"3-galvanisk-skille",level:3},{value:"4. Trelagsarkitektur",id:"4-trelagsarkitektur",level:3},{value:"Oppsummering",id:"oppsummering",level:3},{value:"Web Services",id:"web-services",level:2},{value:"Sanntidsoppdatering",id:"sanntidsoppdatering",level:2},{value:"Masterdata, delte data og verdikjeder",id:"masterdata-delte-data-og-verdikjeder",level:2},{value:"Retrofit",id:"retrofit",level:2}],k={toc:d};function g(e){let{components:n,...s}=e;return(0,a.kt)("wrapper",(0,t.Z)({},k,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Som systemeier, prosjektleder, innkj\xf8per og applikasjonsforvalter er det flere\naspekter ved integrasjonsarktitekturen man b\xf8r tenke gjennom f\xf8r produkt eller\nleverand\xf8r velges. Her diskuteres punkter ved integrasjoner som er verdt \xe5 ta\nmed seg. Det meste handler om kost/nytte-vurderinger, som er ulik for hver\nIT-tjeneste."),(0,a.kt)("h2",{id:"moderne-og-gammeldags-programvare"},"Moderne og gammeldags programvare"),(0,a.kt)("p",null,"Det viktigste f\xf8rst: N\xe5r du kj\xf8per ferdig programvare, s\xe5kalt hyllevare, m\xe5 du\nikke falle for fristelsen til \xe5 kj\xf8pe tjenester for \xe5 tilpasse programvaren til\norganisasjonen. Dette er som oftest det dyreste valget, siden tilpasninger av\nhyllevare ofte gire store merkostnader. Tilpass heller organisasjonens\nprosesser etter programvaren, med mindre det er del av prim\xe6rvirksomheten eller\net strategisk valg \xe5 f\xf8lge egne prosesser. For administrative prosesser er det\nofte bedre \xe5 tilpasse seg tjenesten, mens det innen forskning og utdanning er\nen vanskeligere vurdering."),(0,a.kt)("p",null,"N\xe5r du som systemeier anskaffer programvare, s\xe5 er det gjerne programvare en\nbruker, et menneske, skal sitte \xe5 jobbe i. Med integrasjons\xf8yne er det da i\nhovedsak fire forhold som m\xe5 vurderes:"),(0,a.kt)("h3",{id:"1-provisjonering"},"1. Provisjonering"),(0,a.kt)("p",null,"Det er vanlig at tjenester trenger\n",(0,a.kt)("a",{parentName:"p",href:"/docs/datadeling/begreper/provisjonering"},"provisjonering")," av informasjon, som\nbrukerkontoer. Nesten alle kj\xf8pte webapplikasjoner med brukerinnlogging havner\ni denne kategorien."),(0,a.kt)("p",null,"Eldre typer teknologi benytter gjerne katalogtjenester, som AD eller LDAP.\nDette er ofte rimelig \xe5 implementere, siden tjenesten har dette ferdig satt\nopp, og katalogen er allerede p\xe5 plass. Ulempene er blant annet at du er\ntvungen til \xe5 bruke de dataene som er tilgjengelige i katalogen, og det er\nvanskeligere \xe5 ha oversikt over hvem som har tilgang. Det er heller ikke s\xe5\nmange begrensninger p\xe5 hvem som kan se informasjonen i katalogen - spesielt i\nAD har alle tilgang til alle data - s\xe5 du \xf8nsker ikke eksponere\nbeskyttelsesverdige data i katalogen."),(0,a.kt)("p",null,"Vi er opptatt av om tjenesten kan oppdateres i sanntid eller ikke. Her snakker\nvi da om den kan f\xe5 eller avgi informasjon fra/til andre IT-tjenester\nkontinuerlig eller periodisk (for eksempel en gang i d\xf8gnet). Provisjonering\nkan ogs\xe5 skje manuelt ved at man taster inn navn, adresse eller lignende."),(0,a.kt)("p",null,'Programvare som bygger en brukerkonto/-profil under f\xf8rste innlogging kalles\n"Just in Time provisjonering" (JIT). Disse henter ofte data om brukeren gjennom\nFeide-p\xe5loggingen (OpenID Connect (OIDC) eller SAML), men kan ogs\xe5 f\xe5\nutfyllende detaljer fra et API i p\xe5loggingsprosessen (for eksempel ved bruk av\nOAuth).'),(0,a.kt)("p",null,"Integrasjonsmessig kan JIT virke fordelaktig over vanlig provisjonering, men\nogs\xe5 her er det fallgruver. JIT-tjenester bygger gjerne en tynn profil, og\nforventer at brukeren registerer resten av sine data selv."),(0,a.kt)("h3",{id:"2-integrasjonsteknologi"},"2. Integrasjonsteknologi"),(0,a.kt)("p",null,'Filoverf\xf8ringer og sp\xf8rringer direkte mot databasen (SQL) regnes som gammeldags\n("legacy"), men ogs\xe5 integrasjon via Web Services (WS) kan gj\xf8res p\xe5 avleggs\nm\xe5ter. Vanligvis foretrekker vi en retning innen Web services som kalles\nRESTful. Denne retningen har sin styrke i \xe5 v\xe6re intuitiv, man kan lete seg\nfrem til data man trenger, og beh\xf8ver liten eller ingen kunnskap om kommandoord\neller argumenter. Se ',(0,a.kt)("a",{parentName:"p",href:"/docs/datadeling/god-praksis/api-design"},"design av API"),"\nfor mer detaljer."),(0,a.kt)("p",null,"I dag er det ofte REST som er bransjestandarden i bruk av WS, da den er enkel \xe5\nbruke. Eldre WS-varianter er SOAP, men den er lite intuitiv, ofte propriet\xe6r,\nhar h\xf8y inngangsterskel og liten gjenbruksverdi, og er derfor ikke anbefalt \xe5\nbruke mellom tjenester."),(0,a.kt)("p",null,"Det kommer ogs\xe5 nye WS-varianter, for eksempel GraphQL og gRPC, som kan ha sine\nstyrker og fordeler. De m\xe5 likevel vurderes f\xf8r de akspeteres - er de utbredte\nnok til \xe5 v\xe6re en ny bransjestandard, eller er det fare for lock in? Mister du\nnoen av fordelen som den eldre varianten har? Blir det enklere eller mer\nkomplisert \xe5 integrere? Ofte \xf8nsker vi \xe5 prioritere at det er enkelt \xe5\nintegrere mot WS-varianten, enn at WS-varianten er rask og effektiv."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/datadeling/veiledere/annet/anskaffelse/webservicefordummies"},"Heller ikke REST er uten ulemper, og dette har vi samlet i et eget\ndokument"),"."),(0,a.kt)("p",null,"Sanntidsoppdateringer er i dag ikke godt nok st\xf8ttet i WS i seg selv, s\xe5 i\nfellestjenesten for datadeling tilbyr vi \xe5 bruke en meldingsk\xf8 (MQ) for dette.\nDette h\xe5ndteres d\xe5 uavhengig av API-et. Det kan godt komme\nsanntidsoppdateringer gjennom WS i fremtiden som kan dekke bruksm\xf8nster godt\nnok."),(0,a.kt)("h3",{id:"3-galvanisk-skille"},"3. Galvanisk skille"),(0,a.kt)("p",null,"Et tredje kriterie man kan rette seg etter for \xe5 bed\xf8mme hvor moderne en\nIT-tjeneste/programvare er, er om man gj\xf8r innlogging i operativsystemet, eller\ni applikasjonen. Om operativsystemet vet hvem du er eller ikke, kaller vi et\ngalvanisk skille."),(0,a.kt)("p",null,"Forenklet sagt: Styr unna tjenester som gj\xf8r innlogging i operativsystemet."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/datadeling/begreper/galvanisk-skille"},"Les mer om galvanisk skille"),"."),(0,a.kt)("h3",{id:"4-trelagsarkitektur"},"4. Trelagsarkitektur"),(0,a.kt)("p",null,"Trelagsarkitektur inneb\xe6rer at man kan benytte (helst valgfri) funksjonalitet\nfra en IT-tjeneste i en annen. Som regel er det \xf8nskelig med API mellom\nlagene/funksjonaliteten."),(0,a.kt)("p",null,"Et eksempel er at en portal for studenter kan hente data fra ett API for \xe5\nhente hvilke emner studenten tar, og ett API for \xe5 vise dagens forelesninger. I\ntillegg kan portalen gi mulighet for \xe5 reservere et kollokvierom. Alt dette kan\ngj\xf8res direkte i portalen, uten \xe5 m\xe5tte g\xe5 innom andre tjenester/nettsider,\nfordi portalen kan gj\xf8re dette gjennom de andre tjenestenes API."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/datadeling/begreper/trelagsarkitektur"},"Les mer om trelagsarkitektur"),"."),(0,a.kt)("h3",{id:"oppsummering"},"Oppsummering"),(0,a.kt)("p",null,"Kort oppsummert gir dette en matrise med noen stikkord som kan si oss noe om\nhvor moderne en applikasjon er, spesielt med henhold til om den er tiltenkt\nstore brukermasser med homogene behov. De fleste applikasjoner har trekk fra\nb\xe5de raden 'Moderne' og raden 'Gammeldags'."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Provisjonert"),(0,a.kt)("th",{parentName:"tr",align:null},"API"),(0,a.kt)("th",{parentName:"tr",align:null},"Autentisering"),(0,a.kt)("th",{parentName:"tr",align:null},"Applikasjons-oppbygning"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Moderne"),(0,a.kt)("td",{parentName:"tr",align:null},"Sanntidsoppdatering"),(0,a.kt)("td",{parentName:"tr",align:null},"REST og meldingsk\xf8"),(0,a.kt)("td",{parentName:"tr",align:null},"SAML, OIDC, Oauth"),(0,a.kt)("td",{parentName:"tr",align:null},"L\xf8st koblet trelagsarkitektur (med hendelser)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Gammeldags"),(0,a.kt)("td",{parentName:"tr",align:null},"Batch (eller manuell)"),(0,a.kt)("td",{parentName:"tr",align:null},'SOAP, filoverf\xf8ring, systembruker, SQL, RSS, "REST-rpc"'),(0,a.kt)("td",{parentName:"tr",align:null},"Katalogtjenester, som AD og LDAP, til autentisering og/eller autorisasjon"),(0,a.kt)("td",{parentName:"tr",align:null},"Tolagsarkitektur, eller programvare med tette koblinger")))),(0,a.kt)("h2",{id:"web-services"},"Web Services"),(0,a.kt)("p",null,"Web Services (WS) er en type API (integrasjonsgrensesnitt). Det er noe\nprogramvare benytter for \xe5 sende informasjon mellom seg, og ikke direkte mellom\nbruker og programvare. Vi som driver med integrasjonsarkitektur liker alts\xe5 WS.\nWS er de facto standard for utveksling av informasjon p\xe5 internett i dag."),(0,a.kt)("p",null,"Web service er riktignok en sekkebetegnelse. N\xe5r man vurderer programvare er\ndet ikke nok at leverand\xf8ren forsikrer om at programvaren har web services. Det\nkan enn\xe5 v\xe6re mange hindringer i veien: Lisenser, dokumentasjon,\nspesialkompetanse, propriet\xe6re formater osv. Kan API-et faktisk brukes av\nkonsumenter?"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/datadeling/veiledere/annet/anskaffelse/webservicefordummies"},"Les mer om Web Services")),(0,a.kt)("h2",{id:"sanntidsoppdatering"},"Sanntidsoppdatering"),(0,a.kt)("p",null,"Det finnes flere sanntidsteknologier, men den vi har valgt i fellestjenesten\nfor datadeling (IntArk) bruker Meldingsk\xf8 (MQ). Illustrasjonen under viser\ninformasjonsflyten. Teknisk implementasjon krever langt flere komponenter."),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(9495).Z,width:"836",height:"307"})),(0,a.kt)("p",null,"Hver gang det skjer en endring i kildedataene hos datatilbyder (produsent),\nsender datatilbyder en notifikasjon til meldingsk\xf8en, men lenke til\ninformasjonen som har blitt endret (vanligvis tjenestens API). Meldingsk\xf8en tar\nseg av \xe5 sende denne notifikasjonen videre til alle konsumenter som er\ninteresserte. Konsumenten leser notifikasjonen, vurderer om det er relevant,\nhenter data fra API-et, og gj\xf8r n\xf8dvendige oppdateringer hos seg."),(0,a.kt)("p",null,"Med meldingsk\xf8 kan mange konsumenter f\xe5 den samme meldingen. Alle som har en\nmeldingsk\xf8 kan f\xe5 oppdatert sine data umiddelbart, n\xe5r data endres i\ndatakilden. Meldingsk\xf8en holder (for hver k\xf8) p\xe5 meldingen til k\xf8ens konsument\nhar hentet meldingen. Verdien til meldingsk\xf8er er alts\xe5 lett \xe5 se: Alle\nIT-tjenester (som benytter tjenesten) vil ha konsistente data umiddelbart."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/datadeling/veiledere/annet/anskaffelse/sanntidsoppdatering"},"Les mer om sanntidsoppdatering")),(0,a.kt)("h2",{id:"masterdata-delte-data-og-verdikjeder"},"Masterdata, delte data og verdikjeder"),(0,a.kt)("p",null,"Et sp\xf8rsm\xe5l som reises n\xe5r man forteller om meldingsk\xf8 er om man da kan skifte\nsine data i et hvilket som helst system, og s\xe5 vil dette reflekteres i alle\nsystem. Svaret er at dette er kompleksitet vi ikke klarer \xe5 h\xe5ndtere. Derimot\nkan man gj\xf8re det fra et hvilket som helst presentasjonslag, som mobil-app\neller nettleser, s\xe5 lenge de benytter samme datalager i bakgrunnen. For \xe5\nh\xe5ndtere kompleksiteten m\xe5 en og bare en IT-tjeneste v\xe6re autoritativt\nkildesystem hos institusjonen. Det er en bestemmelse som gj\xf8res utenfor IT. Man\nbestemmer at dersom data ikke er like i to datakilder, er det den ene kilden\nsom gjelder, uavhengig av hvor data ble endret sist."),(0,a.kt)("p",null,"Hvilke datakilder som er autoritative for hvilke data kan variere, men det m\xe5\nv\xe6re bestemt p\xe5 forh\xe5nd. De data en IT-tjeneste er autoritative for, kalles\nautoritative data, eller kildedata. Man skal helst hente data fra autoritativ\nkilde, men dersom dette ikke er hensiktsmessig, skal dataene ikke endres p\xe5\nveien. Typiske eksempler er programvare som henter data fra katalogtjenester\nsom AD og LDAP."),(0,a.kt)("p",null,"Ved anskaffelser m\xe5 det v\xe6re tydelig p\xe5 forh\xe5nd hvilke data tjenesten som\nanskaffes skal v\xe6re autoritativ for, og hvilke data som skal hentes fra andre\nkilder. De fleste IT-tjenester har langt mer autoritative data enn det de andre\nkonsumentene har behov for. Ofte benyttes derfor begrepet masterdata om dataen\ntjenesten er autoritativ for og deler med andre tjenester. Men hva man deler\nfra dag \xe9n, og hva som skal deles i fremtiden, er ikke alltid lett \xe5 forutsi."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/datadeling/veiledere/annet/anskaffelse/masterdata-verdikjeder"},"Les mer om masterdata og verdikjeder")),(0,a.kt)("h2",{id:"retrofit"},"Retrofit"),(0,a.kt)("p",null,"Hva om min foretrukne skytjeneste eller programvare ikke har MQ og RESTful web\nservices? Hva om den snakker SOAP og RSS? Benytter systembruker?"),(0,a.kt)("p",null,"Vi gj\xf8r iblant grep for \xe5 f\xe5 gammel teknologi til \xe5 fungere med ny teknologi.\nEt slikt grep kalles en ",(0,a.kt)("em",{parentName:"p"},"retrofit"),". Ofte gj\xf8res det ved at noen implementerer\nen mikrotjeneste som oversetter. Dette gj\xf8r at vi har et st\xf8rre utvalg av\nIT-tjenester \xe5 velge mellom."),(0,a.kt)("p",null,"En retrofit har en kostnad, b\xe5de i utvikling og videre drift og forvaltning.\nDette m\xe5 med i vurderingen av tjenester."),(0,a.kt)("p",null,"For mange st\xf8rre tjenester finnes det allerede mikrotjenester som kanskje kan\ngjenbrukes. For eksempel foran Canvas, Zoom og Exchange."))}g.isMDXComponent=!0},9495:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/ia-diamond-89c550297b81b38d9d2f2c0a82d45342.jpg"}}]);