"use strict";(self.webpackChunkdocs_sikt_no=self.webpackChunkdocs_sikt_no||[]).push([[7324],{2651:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var s=i(4848),t=i(8453);const a={},r="Describe data as metadata",l={id:"kudaf/data-describe",title:"Describe data as metadata",description:"To use KUDAF you have to describe your data as metadata. This page describes",source:"@site/docs/kudaf/data-describe.md",sourceDirName:"kudaf",slug:"/kudaf/data-describe",permalink:"/docs/kudaf/data-describe",draft:!1,unlisted:!1,editUrl:"https://github.com/sikt-no/docs/tree/master/docs/kudaf/data-describe.md",tags:[],version:"current",lastUpdatedAt:1729688885e3,frontMatter:{},sidebar:"kudaf",previous:{title:"Enable data sharing with KUDAF",permalink:"/docs/kudaf/data-sharing"},next:{title:"Protect data endpoint",permalink:"/docs/kudaf/data-protect"}},d={},o=[{value:"Kickstarter",id:"kickstarter",level:2},{value:"Identifier variable",id:"identifier-variable",level:3},{value:"Measure variable",id:"measure-variable",level:3},{value:"Temporality",id:"temporality",level:4},{value:"Attribute variable",id:"attribute-variable",level:4},{value:"Metadata as Single-Variable Dataset",id:"metadata-as-single-variable-dataset",level:2},{value:"Variable naming guidelines",id:"variable-naming-guidelines",level:2},{value:"Measure variable data structure",id:"measure-variable-data-structure",level:2},{value:"Valid period",id:"valid-period",level:3},{value:"Value domain",id:"value-domain",level:3},{value:"Examples of the two possible value domains",id:"examples-of-the-two-possible-value-domains",level:4},{value:"Described value domain (with <code>description</code>)",id:"described-value-domain-with-description",level:5},{value:"Enumerated value domain (with <code>codeList</code>)",id:"enumerated-value-domain-with-codelist",level:5},{value:"Measure variables (with <code>keyType</code>)",id:"measure-variables-with-keytype",level:3},{value:"Identifier variable data structure",id:"identifier-variable-data-structure",level:2},{value:"Possible Unit Types",id:"possible-unit-types",level:3},{value:"Shared Unit Types",id:"shared-unit-types",level:4},{value:"Data source specific Unit Types",id:"data-source-specific-unit-types",level:4},{value:"Attribute variables data structure",id:"attribute-variables-data-structure",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"describe-data-as-metadata",children:"Describe data as metadata"})}),"\n",(0,s.jsx)(n.p,{children:"To use KUDAF you have to describe your data as metadata. This page describes\nhow to do this."}),"\n",(0,s.jsx)(n.h2,{id:"kickstarter",children:"Kickstarter"}),"\n",(0,s.jsx)(n.p,{children:"In this section we will explain the thought process of generating metadata from\nsome raw data."}),"\n",(0,s.jsx)(n.p,{children:"Say we have some raw data that describes a vehicle's history of color\nchange. This data is represented in the table below:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"ID"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Color"}),(0,s.jsx)(n.th,{children:"Color start date"}),(0,s.jsx)(n.th,{children:"Color stop date"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"Unicycle"}),(0,s.jsx)(n.td,{children:"Red"}),(0,s.jsx)(n.td,{children:"1970-01-01"}),(0,s.jsx)(n.td,{children:"2000-01-01"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"Unicycle"}),(0,s.jsx)(n.td,{children:"Blue"}),(0,s.jsx)(n.td,{children:"2000-01-01"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"Bycicle"}),(0,s.jsx)(n.td,{children:"Green"}),(0,s.jsx)(n.td,{children:"1990-02-03"}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"A good starting point to generate metadata is to examine the data to discover potential\nindividual metadata variables."}),"\n",(0,s.jsx)(n.p,{children:"We can think of each column in this table as a potential variable:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"ID"}),"\n",(0,s.jsx)(n.li,{children:"Type"}),"\n",(0,s.jsx)(n.li,{children:"Color"}),"\n",(0,s.jsx)(n.li,{children:"Color start date"}),"\n",(0,s.jsx)(n.li,{children:"Color stop date"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"A variable can either be an identifier variable or a measure variable.\nWe need to distinguish which of the listed potential variables are of each type."}),"\n",(0,s.jsx)(n.p,{children:"Let us start by defining the identifier variable first."}),"\n",(0,s.jsx)(n.h3,{id:"identifier-variable",children:"Identifier variable"}),"\n",(0,s.jsx)(n.p,{children:'A identifier variable is a description of the identifier column of the table.\nBy going through the rows in the table we can see that the "ID" column uniquely\nidentifies a vehicle. We can see in the first row the unicycle identified by ID=1\nstarts with a red color for a period. Then in the second row we can see the\nsame unicycle changed its color from red to blue because it had a paint job.\nLastly, the third row describes the vehicle color for a different vehicle.'}),"\n",(0,s.jsx)(n.p,{children:'Now that we have discovered the identifier variable we can start to describe it.\nThe identifier variable description should contain a unit type and the\nidentifier column name. Already we know that column name is "ID". Lastly, we need\nto figure out the unit type. The unit type is what type of unit the variables\ndescribes. By looking at all of the columns we can determine that this table\ndescribes vehicles, so we will define our unit type for this dataset as "Vehicle".'}),"\n",(0,s.jsx)(n.p,{children:"Using all the information we can start with creating a JSON object to represent\nour identifier variable as shown below."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "identifierVariables": [\n    {\n      "name": "ID",\n      "label": "Vehicle identifier",\n      "keyType": {\n        "name": "Vehicle",\n        "label": "Vehicle"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:'In the JSON object we have used the field "name" to refer to the column name in\nthe table, while the label is a description of the same, but can be changed to be\nmore legible in user interfaces.'}),"\n",(0,s.jsx)(n.h3,{id:"measure-variable",children:"Measure variable"}),"\n",(0,s.jsx)(n.p,{children:"By looking at the remaining potential variables we can assume that the rest are\nmeasure variables:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Type"}),"\n",(0,s.jsx)(n.li,{children:"Color"}),"\n",(0,s.jsx)(n.li,{children:"Color start date"}),"\n",(0,s.jsx)(n.li,{children:"Color stop date"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:'We can start by defining the column "Type" as a measure variable JSON object\nshown below.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "identifierVariables": [\n    {\n      "name": "ID",\n      "label": "Vehicle identifier",\n      "keyType": {\n        "name": "Vehicle",\n        "label": "Vehicle"\n      }\n    }\n  ],\n  "measureVariable": {\n    "name": "Type",\n    "label": "Vehicle type"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Measure variables have a temporality type, so the next step is to identify this."}),"\n",(0,s.jsx)(n.h4,{id:"temporality",children:"Temporality"}),"\n",(0,s.jsx)(n.p,{children:"Temporality is a state of time, and the possible temporality types are these:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"FIXED"})})," - data that do not change over time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"EVENT"})})," - data that may vary over time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"STATUS"})})," - data of specific points in time, that do not describe what happens\nbetween the points in time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ACCUMULATED"})})," \u2013 a sum of periodically recorded data from an entire period"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["By investigating the first variable type we can assume that the type of a vehicle\nwill likely not change. When looking at the small table we can confirm this and\nsee that it does not change making this variable a good candidate for the\ntemporality type ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"FIXED"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:'We can therefore add the field "temporality" to our JSON object and give it the\nvalue "FIXED", which is shown below.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "identifierVariables": [\n    {\n      "name": "ID",\n      "label": "Vehicle identifier",\n      "keyType": {\n        "name": "Vehicle",\n        "label": "Vehicle"\n      }\n    }\n  ],\n  "measureVariable": {\n    "name": "Type",\n    "label": "Vehicle type"\n  },\n  "temporality": "FIXED"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:'We have now successfully generated the variable "Type". So let us take a look at\n"Color" next.'}),"\n",(0,s.jsx)(n.p,{children:'We start by wrapping our JSON object in an array since we are now introducing a\nnew element. In this new JSON object we have reused the identifier variable object\nwe previously created since the "Color" variable also has the same identifier variable.\nThen we create a measure variable object with name and label that fits the "Color"\nvariable.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "identifierVariables": [\n      {\n        "name": "ID",\n        "label": "Vehicle identifier",\n        "keyType": {\n          "name": "Vehicle",\n          "label": "Vehicle"\n        }\n      }\n    ],\n    "measureVariable": {\n      "name": "Type",\n      "label": "Vehicle type"\n    },\n    "temporality": "FIXED"\n  },\n  {\n    "identifierVariables": [\n      {\n        "name": "ID",\n        "label": "Vehicle identifier",\n        "keyType": {\n          "name": "Vehicle",\n          "label": "Vehicle"\n        }\n      }\n    ],\n    "measureVariable": {\n      "name": "Color",\n      "label": "Vehicle color"\n    }\n  }\n]\n'})}),"\n",(0,s.jsxs)(n.p,{children:['We have most of the basics defined, now we can take a look at temporality.\nTaking "Colo start date" and "Color stop date" into account, we see that "Color"\ndata changes over time. This means that this is a good candidate for the\ntemporality type "Event". We can also identify that the time points in "Color start\ndate" and "Color stop date" are coherent which excludes it from being of temporality\ntype ',(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"STATUS"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Since we have identified this variable to be the temporality type ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"EVENT"})}),', we\nsimply create a "temporality" field within our JSON object and gives it the value\n"EVENT", as shown below.']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "identifierVariables": [\n      {\n        "name": "ID",\n        "label": "Vehicle identifier",\n        "keyType": {\n          "name": "Vehicle",\n          "label": "Vehicle"\n        }\n      }\n    ],\n    "measureVariable": {\n      "name": "Type",\n      "label": "Vehicle type"\n    },\n    "temporality": "FIXED"\n  },\n  {\n    "identifierVariables": [\n      {\n        "name": "ID",\n        "label": "Vehicle identifier",\n        "keyType": {\n          "name": "Vehicle",\n          "label": "Vehicle"\n        }\n      }\n    ],\n    "measureVariable": {\n      "name": "Color",\n      "label": "Vehicle color"\n    },\n    "temporality": "EVENT"\n  }\n]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In cases where we have an ",(0,s.jsx)(n.strong,{children:"EVENT"}),' temporality type, the "Color start date" and\n"Color stop date" must be included as attribute variables within the measure variable\nof "Color".']}),"\n",(0,s.jsx)(n.h4,{id:"attribute-variable",children:"Attribute variable"}),"\n",(0,s.jsxs)(n.p,{children:["An attribute variable describes temporal attributes of data and is optional\nbecause variables with temporality type ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"FIXED"})})," has no relation to time."]}),"\n",(0,s.jsx)(n.p,{children:"Depending on the temporality type of the variable:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"FIXED"})})," - (i.e. time-invariant) we do not\ninclude this."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ACCUMULATED"})})," - we would typically include\ntwo attribute variables: ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"START"})," and ",(0,s.jsx)(n.code,{children:"STOP"})]}),". If only one is included, that\nwould mean:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"All data until"})," the given stop time ",(0,s.jsxs)(n.strong,{children:["if only ",(0,s.jsx)(n.code,{children:"STOP"})]})," is included, and\nsince the earliest available data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"All data since"})," the given start time ",(0,s.jsxs)(n.strong,{children:["if only ",(0,s.jsx)(n.code,{children:"START"})]})," is included,\nand up until the latest available data."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"STATUS"})})," - we ",(0,s.jsx)(n.strong,{children:"always DO include TWO"})," attribute variables: ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"START"})," and\n",(0,s.jsx)(n.code,{children:"STOP"}),", with THE SAME dates"]}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"EVENT"})})," - we ",(0,s.jsx)(n.strong,{children:"DO include ONE or TWO"})," attribute variables, depending on how\nwe want to characterize the event in question. It could be: ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"START"})," and ",(0,s.jsx)(n.code,{children:"STOP"}),"\ndates/times"]}),", or ",(0,s.jsx)(n.code,{children:"INSTANT"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We then add JSON object describing the attribute variables to our variable, as\nshown below."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "identifierVariables": [\n      {\n        "name": "ID",\n        "label": "Vehicle identifier",\n        "keyType": {\n          "name": "Vehicle",\n          "label": "Vehicle"\n        }\n      }\n    ],\n    "measureVariable": {\n      "name": "Type",\n      "label": "Vehicle type"\n    },\n    "temporality": "FIXED"\n  },\n  {\n    "identifierVariables": [\n      {\n        "name": "ID",\n        "label": "Vehicle identifier",\n        "keyType": {\n          "name": "Vehicle",\n          "label": "Vehicle"\n        }\n      }\n    ],\n    "measureVariable": {\n      "name": "Color",\n      "label": "Vehicle color"\n    },\n    "temporality": "EVENT",\n    "attributeVariables": [\n      {\n        "label": "Color start date",\n        "name": "Start"\n      },\n      {\n        "label": "Color stop date",\n        "name": "Stop"\n      }\n    ]\n  }\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"By now you should have good starting point to continue this guide and enrich\nyou current variables with more required fields."}),"\n",(0,s.jsx)(n.h2,{id:"metadata-as-single-variable-dataset",children:"Metadata as Single-Variable Dataset"}),"\n",(0,s.jsxs)(n.p,{children:["Metadata in KUDAF are described as a Single-Variable Dataset. For more information\nabout the standard go ",(0,s.jsx)(n.a,{href:"/docs/kudaf/metadata-standard#raird-information-model",children:"here"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The JSON object below illustrates such a variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "name": "FEIDESTATS_LOGINS_FORG_ACCUM",\n    "datasource_name": "sikt",\n    "populationDescription": {...},\n    "subjectFields": [...],\n    "temporalCoverage": {...},\n    "temporality": "ACCUMULATED",\n    "globalTemporalCoverage": {...},\n    "temporalStatusDates": null,\n    "updatedAt": "2022-09-13T09:31:22",\n    "attributeVariables": [...],\n    "identifierVariables": [...],\n    "measureVariable": {...}\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Description of fields in the schema above:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"name"}),": Name of the variable which adhere to ",(0,s.jsx)(n.a,{href:"#variable-naming-guidelines",children:"naming guidelines"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"temporalityType"}),": The temporality type which must be one of FIXED, ACCUMULATED,\nSTATUS or EVENT."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"populationDescription"}),": Description of the ",(0,s.jsx)(n.strong,{children:"population described"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"spatialCoverageDescription"}),": Description of the ",(0,s.jsx)(n.strong,{children:"spatial distribution"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"sensitivityLevel"}),": The sensitivity type which must be one of ",(0,s.jsx)(n.em,{children:"PERSON_GENERAL"}),",\n",(0,s.jsx)(n.em,{children:"PERSON_SPECIAL"}),", ",(0,s.jsx)(n.em,{children:"PUBLIC"}),", ",(0,s.jsx)(n.em,{children:"NONPUBLIC"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"identifierVariables"}),": A list containing ",(0,s.jsx)(n.strong,{children:"unique identifier(s)"}),"\n(like a ",(0,s.jsx)(n.em,{children:"primary key"})," in a database). This is what ",(0,s.jsx)(n.strong,{children:"allows us to associate the\nmeasured value with a unit of measure"}),". The data structure is described in ",(0,s.jsx)(n.a,{href:"#identifier-variable-data-structure",children:"this\nsection"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"measureVariable"}),": ",(0,s.jsxs)(n.strong,{children:["Describe(s) what is ",(0,s.jsx)(n.em,{children:"measured"})]}),". The data structure is\ndescribed in ",(0,s.jsx)(n.a,{href:"#measure-variable-data-structure",children:"this section"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"attributeVariables"}),": An optional list containing elements which ",(0,s.jsx)(n.strong,{children:"describe the\nrelationship to time, i.e. the EVENT PERIOD"}),". It's optional because it depends\non the Temporality Type, and the ",(0,s.jsx)(n.code,{children:"FIXED"})," type is time-invariant. The data structure\nis described in ",(0,s.jsx)(n.a,{href:"#attribute-variables-data-structure",children:"this section"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The Measure, Attribute and Identifier Variables data structures are explained in more detail below."}),"\n",(0,s.jsx)(n.h2,{id:"variable-naming-guidelines",children:"Variable naming guidelines"}),"\n",(0,s.jsx)(n.p,{children:"The name of a Variable should:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Describe ",(0,s.jsx)(n.strong,{children:"what is measured"})]}),"\n",(0,s.jsxs)(n.li,{children:["Consist of a ",(0,s.jsx)(n.strong,{children:"single string in capital letters"}),", made up of ",(0,s.jsx)(n.strong,{children:"keywords separated\nby underscores"})," (",(0,s.jsx)(n.code,{children:"_"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["In line with the KUDAF objective to maximize data-sharing potential, it would\nbe preferable to write the ",(0,s.jsx)(n.strong,{children:"keywords in English"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["It ",(0,s.jsx)(n.strong,{children:"must be the same as the name of the Measure Variable"})," data structure within\n|the Variable."]}),"\n",(0,s.jsxs)(n.li,{children:["The name ",(0,s.jsx)(n.strong,{children:"must be UNIQUE"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"How to structure keywords"})," in the name using contained information in the variable:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"1st keyword"})," (before the first underscore) is a shortened alias from your\n",(0,s.jsx)(n.strong,{children:"data source"})," identifier. Examples:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Feide public API: "FEIDEAPI"'}),"\n",(0,s.jsx)(n.li,{children:'Feide Statistics database: "FEIDESTATS"'}),"\n",(0,s.jsx)(n.li,{children:'L\xe5nekassen: "LK"'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"2nd keyword (or group of keywords)"})," should summarize ",(0,s.jsx)(n.strong,{children:"what is measured"}),".\nExamples:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'School names: "SCHOOL_NAMES" (in this case not technically a "measure", more\nof a qualifier)'}),"\n",(0,s.jsx)(n.li,{children:'Login event counts: "LOGINS"'}),"\n",(0,s.jsx)(n.li,{children:'Multi-factor authentication event counts: "MFAS"'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"3rd keyword (or group of keywords)"})," should point out the ",(0,s.jsx)(n.strong,{children:"unique identifier(s)"}),".\nExamples:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'If the login event counts are accumulated for each organization: "ORG"'}),"\n",(0,s.jsx)(n.li,{children:'If the multi-factor authentication event counts are accumulated for each combination\nof organization and authentication method: "ORG_METHOD"'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"last keyword (if present)"})," can indicate the ",(0,s.jsx)(n.strong,{children:"temporality"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If the temporality type is ",(0,s.jsx)(n.strong,{children:'"FIXED", we can omit it.'})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Otherwise"})," for the other temporality types, ",(0,s.jsx)(n.strong,{children:'choose one of: "ACCUM", "STATUS",\n"EVENT"'}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:'A complete example from the above could be "FEIDESTATS_LOGINS_ORG_METHOD_ACCUM". This\nVariable would thus refer to data that:'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Comes from the Feide Statistics data source."}),"\n",(0,s.jsx)(n.li,{children:"Measures login event counts."}),"\n",(0,s.jsx)(n.li,{children:"Each measure is identified by an organization and a service provider."}),"\n",(0,s.jsx)(n.li,{children:"The measures (login event counts) are accumulated over a given time period."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"measure-variable-data-structure",children:"Measure variable data structure"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description of the measured column"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class MeasureVariable:\n    name: str\n    variableRole: str\n    label: str\n    dataType: str\n    keyType: KeyType\n    representedVariables: list[RepresentedVariable]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Fields:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"name"}),": Must be equal to the name generated for the name field in the SingleVariableDataset data structure."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"variableRole"}),': describes the role of the variable, for measure variable it\nwould be "Measure"']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"label"}),': Human readable name (Label) of the measure column. This should be similar to the name. Example for PERSON_INNTEKT: "Person inntekt".']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"dataType"}),': DataType for the values in the column. One of: ["STRING", "LONG", "DOUBLE", "DATE"]']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://statswiki.unece.org/display/clickablegsim/Represented+Variable",children:"representedVariables"})}),": List (though normally just one element) that ",(0,s.jsx)(n.strong,{children:"describes more in detail what kind of data (the WHAT and the HOW)"})," we can find. It's a ",(0,s.jsx)(n.strong,{children:"combination of"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"What"}),": A ",(0,s.jsx)(n.strong,{children:"characteristic"})," of a population to be measured, and"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"How"})," the measure will be ",(0,s.jsx)(n.strong,{children:"represented"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class RepresentedVariable:\n    description: Description\n    validPeriod: ValidPeriod\n    valueDomain: ValueDomainDescribed | ValueDomainEnumerated\n"})}),"\n",(0,s.jsx)(n.p,{children:"Fields within a Represented Variable:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"description"}),': Description of the column contents. Example: "Skattepliktig og skattefritt utbytte i... "']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"validPeriod"}),": See definition below."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"valueDomain"}),": See definition below."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"valid-period",children:"Valid period"}),"\n",(0,s.jsxs)(n.p,{children:["A simple data structure that shows the ",(0,s.jsx)(n.strong,{children:"beginning and end dates when the data is considered valid"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class ValidPeriod:\n    start: datetime\n    stop: datetime\n"})}),"\n",(0,s.jsx)(n.h3,{id:"value-domain",children:"Value domain"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Value Domain"})," describes the ",(0,s.jsx)(n.strong,{children:"set of permissible values of the data represented"}),".\nDepending on the measure, this description can become quite complex. Hence we simplify\nit by having ",(0,s.jsx)(n.strong,{children:"two possible types"})," of Value Domain:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Described Value Domain"}),": When the possibilities are either infinite or just\ntoo many to manage (think of the list of all the National IDs or phone numbers,\nfor example), we settle for a ",(0,s.jsx)(n.strong,{children:"verbal description of the values"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enumerated Value Domain"}),": When there is a ",(0,s.jsx)(n.strong,{children:"manageable (finite list) of possible\ndata values"}),", we provide an ",(0,s.jsx)(n.strong,{children:"enumeration of the possibilities, i.e. a list of\nCategories"}),". An example could be a cardinal directions (north, south, east, west)."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Below are the ",(0,s.jsx)(n.strong,{children:"schemas"})," for these two types of Value Domain."]}),"\n",(0,s.jsxs)(n.p,{children:["For the ",(0,s.jsx)(n.strong,{children:"Described Value Domain"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class ValueDomainDescribed:\n    uriDefinition: list[str]\n    description: Description | str\n    measurementType: str\n    measurementUnitDescription: str\n"})}),"\n",(0,s.jsx)(n.p,{children:"Where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"description"}),': A description of the domain. Example for the Variable "BRUTTO_INNTEKT":\n"Alle positive tall".']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"measurementUnitDescription"}),': The metric for a measurement in terms of an official\nunit of measurement. Example: "Norske Kroner".']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"measurementType"}),': The type of measure which groups a set of measurement units.\nOne of: [CURRENCY, WEIGHT, LENGTH, HEIGHT, GEOGRAPHICAL]. Where the CURRENCY type\nwould group "Norske Kroner", "US Dollar", "Euro", etc.']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"uriDefinition"}),": Link(s) to external resource(s) describing the domain."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["And for the ",(0,s.jsx)(n.strong,{children:"Enumerated Value Domain"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class ValueDomainEnumerated:\n    uriDefinition: list[str]\n    codeList: list[Code]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"codeList"}),": A ",(0,s.jsx)(n.strong,{children:"list of Categories for the domain, where each Category has a\npredefined Code assigned to it"}),". Each of these Codes includes a description and\nvalidity period."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Code:\n    categoryTitle: list[Description]\n    code: str\n    validPeriod: ValidPeriod\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-of-the-two-possible-value-domains",children:"Examples of the two possible value domains"}),"\n",(0,s.jsxs)(n.h5,{id:"described-value-domain-with-description",children:["Described value domain (with ",(0,s.jsx)(n.code,{children:"description"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["This example belongs to a Variable where the ",(0,s.jsx)(n.strong,{children:"measure is a person's accumulated gross income"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"valueDomain": {\n    "uriDefinition": [],\n    "description": [{"languageCode": "no", "value": "Norske Kroner"}],\n    "measurementType": "CURRENCY",\n    "measurementUnitDescription": [{"languageCode": "no", "value": "Norske Kroner"}]\n}\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"enumerated-value-domain-with-codelist",children:["Enumerated value domain (with ",(0,s.jsx)(n.code,{children:"codeList"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["The second example belongs to a Variable where the ",(0,s.jsx)(n.strong,{children:"measure describes the sex of a person"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"valueDomain": {\n    "uriDefinition": [],\n    "codeList": [\n        {\n            "code": "1",\n            "categoryTitle": [\n                {"languageCode": "no", "value": "Mann"}\n                ],\n            "validFrom": "1900-01-01"\n        },\n        {\n            "code": "2",\n            "categoryTitle": [\n                {"languageCode": "no", "value": "Kvinne"}\n                ],\n            "validFrom": "1900-01-01"\n        }\n    ],\n    "sentinelAndMissingValues": [\n        {\n            "code": "0",\n            "categoryTitle": [\n                {"languageCode": "no", "value": "Ukjent"}\n                ],\n            "validFrom": "1900-01-01"\n        }\n    ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:'We expect all values in this dataset to be of either code "1" or "2", as this Variable only considers "Male" or "Female". But we also expect a code "0" to be present in the Variable, where it represents "Unknown". A row with "0" as measure is therefore not considered invalid.'}),"\n",(0,s.jsxs)(n.h3,{id:"measure-variables-with-keytype",children:["Measure variables (with ",(0,s.jsx)(n.code,{children:"keyType"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Some of the Variables contain a ",(0,s.jsx)(n.code,{children:"keyType"})," in the Measure Variable data structure"]})," as well. This is characteristic of Identifier Variables, as we'll see below, but sometimes we need a ",(0,s.jsx)(n.strong,{children:"Variable which links together (relates) two Identifier Variables"}),". (The equivalent concept in a relational database would be a ",(0,s.jsx)(n.strong,{children:"Foreign Key"}),")."]}),"\n",(0,s.jsx)(n.p,{children:'As an example, let\'s say we have a Variable PERSON_MOR where the Identifier Variable field is a population of Unit Type "PERSON", and the Measure Variable is a population of Unit Type "PERSON". The measure here is representing the population\'s mothers.'}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"keyType"})," data structure describes in detail the Unit Type"]})," for this Variable's identifier column. As explained, these are centrally defined to ensure consistency. Examples are: ORGANISASJON, TJENESTELEVERAND\xd8R, FAMILIE, FORETAK, HUSHOLDNING, JOBB, KJORETOY, KOMMUNE, KURS, PERSON or VIRKSOMHET."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class KeyType:\n    description: Description | str\n    label: str\n    name: str\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then it may be defined like this:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"keyType"}),": In this case we would choose PERSON."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"name"}),': Human readable name (Label) of the measure column. This should be similar to the Variable\'s name. Example for PERSON_MOR: "Person mor".']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"description"}),': Description of the column contents. Example: "Personens registrerte biologiske mor... "']}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"identifier-variable-data-structure",children:"Identifier variable data structure"}),"\n",(0,s.jsxs)(n.p,{children:["This data structure ",(0,s.jsx)(n.strong,{children:"describes the identifier columns"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsxs)(n.strong,{children:["identifiers are always based on a ",(0,s.jsx)(n.a,{href:"https://statswiki.unece.org/display/clickablegsim/Unit+Type",children:"Unit Type"})]}),",\nwhich is used to describe a class or group of Units based on a single characteristic,\nbut with no specification of time and geography."]}),"\n",(0,s.jsxs)(n.p,{children:["They are needed so we can ",(0,s.jsx)(n.strong,{children:"associate a Measure Variable with a Unit of Measure"}),"\n(or more than one in some cases). A Unit is ",(0,s.jsx)(n.strong,{children:"centrally defined to make joining\ndatasets across organizations possible"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Schema of an Identifier Variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class IdentifierVariable:\n    name: str\n    variableRole: str\n    label: str\n    dataType: str\n    format: str\n    keyType: KeyType\n    representedVariables: list[RepresentedVariable]\n\nclass KeyType:\n    description: Description | str\n    label: str\n    name: str\n"})}),"\n",(0,s.jsx)(n.p,{children:"Fields:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"name"}),": A ",(0,s.jsx)(n.strong,{children:"single string in capital letters"}),", consisting of ",(0,s.jsxs)(n.strong,{children:["the name of the\nidentifier field for the ",(0,s.jsx)(n.em,{children:"datum"})]})," (e.g ",(0,s.jsx)(n.code,{children:"PERSON_ID"}),"). Note that this would typically\nbe equivalent to the original database table's primary key field."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"variableRole"}),': describes the role of the variable, for identifier variable it\nwould be "Identifier"']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"label"}),": Human readable name (Label) of the identifier column. This should be\nsimilar to the field ",(0,s.jsx)(n.code,{children:"name"}),' above (e.g. for PERSON_ID: "Person ID").']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"dataType"}),': DataType for the values in the column. One of: ["STRING", "LONG",\n"DOUBLE", "DATE"]']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"representedVariables"}),": Same as for the Measure Variable described before.\nA list (normally just one) that ",(0,s.jsx)(n.strong,{children:"describes more in detail what kind of data"})," we\ncan find. It's a ",(0,s.jsx)(n.strong,{children:"combination of"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.strong,{children:"characteristic"})," of a population to be measured, and"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"How"})," the measure will be ",(0,s.jsx)(n.strong,{children:"represented"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"keyType"})," data structure describes in detail the ",(0,s.jsx)(n.a,{href:"https://statswiki.unece.org/display/clickablegsim/Unit+Type",children:"Unit Type"})]}),"\nfor this Variable's identifier column. As explained, these are centrally defined\nto ensure consistency. Examples are: ORGANISASJON, TJENESTELEVERAND\xd8R, FAMILIE,\nFORETAK, HUSHOLDNING, JOBB, KJORETOY, KOMMUNE, KURS, PERSON or VIRKSOMHET."]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"possible-unit-types",children:["Possible ",(0,s.jsx)(n.a,{href:"https://statswiki.unece.org/display/clickablegsim/Unit+Type",children:"Unit Types"})]}),"\n",(0,s.jsxs)(n.p,{children:["In KUDAF you can use ",(0,s.jsx)(n.a,{href:"#shared-unit-types",children:"shared unit types"})," or ",(0,s.jsx)(n.a,{href:"#data-source-specific-unit-types",children:"data source specific\nunit types"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The advantage of using shared unit types is that you will get relations with other\ndata source's variables and therefore enable users creating joined and possibly\nmore meaningful projection of data."}),"\n",(0,s.jsx)(n.h4,{id:"shared-unit-types",children:"Shared Unit Types"}),"\n",(0,s.jsx)(n.p,{children:"To use shared unit types you have to implement an unit type from this list:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ORGANISASJON"}),": Representation of an organization. Columns with this unit type\nshould contain ORGNR. Columns with this unit type should contain ORGNR."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TJENESTELEVERAND\xd8R"}),": Representation of a service provider. Columns with this\nunit type should contain SPID."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PERSON"}),": Representation of a person. Columns with this unit type should contain\nFNR."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FAMILIE"}),": Representation of a family. Columns with this unit type should contain\nFNR."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FORETAK"}),": Representation of a foretak. Columns with this unit type should contain\nORGNR."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"VIRKSOMHET"}),": Representation of a virksomhet. Columns with this unit type should\ncontain ORGNR."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"HUSHOLDNING"}),": Representation of a husholdning. Columns with this unit type should\ncontain FNR."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JOBB"}),": Representation of a job. Columns with this unit type should contain FNR_ORGNR.\nFNR belongs to the employee and ORGNR belongs to the employer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"KOMMUNE"}),": Representation of a kommune. Columns with this unit type should contain\na valid kommune number."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"KURS"}),": Representation of a course. Columns with this unit type should contain\nFNR_KURSID. Where FNR belongs to the participant and KURSID is the NUDB course id."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"KJORETOY"}),": Representation of a vehicle. Columns with this unit type should contain\nFNR_REGNR. Where FNR is the owner of the vehicle, and REGNR is the registration number\nfor the vehicle."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If no current Unit Type fits your need, feel free to suggest a new Unit Type by\ncontacting us."}),"\n",(0,s.jsx)(n.h4,{id:"data-source-specific-unit-types",children:"Data source specific Unit Types"}),"\n",(0,s.jsxs)(n.p,{children:["To use data source specific unit types you have to prefix your ",(0,s.jsx)(n.em,{children:"Unit Type's"})," name with your data source identifier. For example:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"1st keyword"})," (before the first underscore) is a shortened alias from your ",(0,s.jsx)(n.strong,{children:"data source"})," identifier. For example:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Feide public API: "FEIDEAPI"'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"2nd keyword"})," should be the name of the identifier field for the datum. For example:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Organization identifier: "ORGANISASJON"'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["A complete example from the above could be ",(0,s.jsx)(n.code,{children:"FEIDEAPI_ORGANISASJON"})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"attribute-variables-data-structure",children:"Attribute variables data structure"}),"\n",(0,s.jsxs)(n.p,{children:["This data structure ",(0,s.jsx)(n.strong,{children:"describes TEMPORAL attributes"})," of this particular ",(0,s.jsx)(n.em,{children:"datum"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["It is ",(0,s.jsx)(n.strong,{children:"optional"})," because not every ",(0,s.jsx)(n.em,{children:"datum"})," has a relationship to time \u2013 the Event\nPeriod."]}),"\n",(0,s.jsxs)(n.p,{children:["Hence, ",(0,s.jsx)(n.strong,{children:"depending on the Temporality Type"})," of the Variable:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For a ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"FIXED"})})," temporality type Variable (i.e. time-invariant) we ",(0,s.jsx)(n.strong,{children:"DO NOT\ninclude"})," an Attribute Variable."]}),"\n",(0,s.jsxs)(n.li,{children:["For an ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ACCUMULATED"})})," temporality type Variable we ",(0,s.jsx)(n.strong,{children:"typically DO include TWO"}),"\nAttribute Variables: ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"START"})," and ",(0,s.jsx)(n.code,{children:"STOP"})]}),". If only one is included, that would\nmean:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"All data until"})," the given stop time ",(0,s.jsxs)(n.strong,{children:["if only ",(0,s.jsx)(n.code,{children:"STOP"})]})," is included, and since\nthe earliest available data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"All data since"})," the given start time ",(0,s.jsxs)(n.strong,{children:["if only ",(0,s.jsx)(n.code,{children:"START"})]})," is included, and\nup until the latest available data."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["For a ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"STATUS"})})," temporality type Variable we ",(0,s.jsx)(n.strong,{children:"always DO include TWO"})," Attribute\nVariables: ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"START"})," and ",(0,s.jsx)(n.code,{children:"STOP"}),", with THE SAME dates"]}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["For an ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"EVENT"})})," temporality type Variable we ",(0,s.jsx)(n.strong,{children:"DO include ONE or TWO"})," Attribute\nVariables, depending on how we want to characterize the Event in question. It could\nbe: ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"START"})," and ",(0,s.jsx)(n.code,{children:"STOP"})," dates/times"]}),", or ",(0,s.jsx)(n.code,{children:"INSTANT"}),"..."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Schema of an Attribute Variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class AttributeVariable:\n    name: str\n    variableRole: str\n    label: str\n    dataType: str\n    representedVariables: list[RepresentedVariable]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Fields:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"name"}),": A ",(0,s.jsx)(n.strong,{children:"single string in capital letters"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"variableRole"}),': describes the role of the variable. E.g, for a start variable\nthe role would be "Start", while stop would be "Stop"']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"label"}),": Human readable name (Label). This should be similar to the field ",(0,s.jsx)(n.code,{children:"name"}),'\nabove (e.g. for START: "Start").']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"dataType"}),': DataType for the values in the column. One of: ["STRING", "LONG",\n"DOUBLE", "DATE", "INSTANT"]']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"representedVariables"}),": Same as for the Measure Variable described before."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Below is an ",(0,s.jsx)(n.strong,{children:"example of the Attribute Variables for an ACCUMULATED temporality type\nVariable"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"attributeVariables": [\n    {\n        "dataType": "Instant",\n        "label": "Stoppdato",\n        "name": "STOP",\n        "representedVariables": [\n            {\n                "description": {\n                    "languageCode": "nb",\n                    "value": "Stoppdato/sluttdato for hendelsen"\n                },\n                "validPeriod": {\n                    "start": -25567,\n                    "stop": 18993\n                },\n                "valueDomain": {\n                    "description": "N/A",\n                    "unitOfMeasure": "N/A"\n                }\n            }\n        ],\n        "variableRole": "Stop"\n    },\n    {\n        "dataType": "Instant",\n        "label": "Startdato",\n        "name": "START",\n        "representedVariables": [\n            {\n                "description": {\n                    "languageCode": "nb",\n                    "value": "Startdato/m\xe5letidspunktet for hendelsen"\n                },\n                "validPeriod": {\n                    "start": -25567,\n                    "stop": 18993\n                },\n                "valueDomain": {\n                    "description": "N/A",\n                    "unitOfMeasure": "N/A"\n                }\n            }\n        ],\n        "variableRole": "Start"\n    }\n]\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var s=i(6540);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);