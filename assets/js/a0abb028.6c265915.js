"use strict";(self.webpackChunkdocs_sikt_no=self.webpackChunkdocs_sikt_no||[]).push([[7821],{1847:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>k,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=r(4848),s=r(8453);const i={author:["Einar Jerpseth"],title:"Tjenesteportef\xf8lje"},l=void 0,o={id:"datadeling/erfaringer/uio/portefolje",title:"Tjenesteportef\xf8lje",description:"Her beskrives det\xa0hvilken informasjon som b\xf8r finnes i en tjenesteportef\xf8lje versus en tjenestekatalog for \xe5 underbygge god og kostnadseffektiv integrasjon. Dokumentet er veiledende og det oppfordres til \xe5 ha en pragmatisk holdning i vurderingen av hva som er praktisk informasjon og detaljeringsniv\xe5.",source:"@site/docs/datadeling/erfaringer/uio/portefolje.md",sourceDirName:"datadeling/erfaringer/uio",slug:"/datadeling/erfaringer/uio/portefolje",permalink:"/docs/datadeling/erfaringer/uio/portefolje",draft:!1,unlisted:!1,editUrl:"https://github.com/sikt-no/docs/tree/master/docs/datadeling/erfaringer/uio/portefolje.md",tags:[],version:"current",lastUpdatedAt:1720608871e3,frontMatter:{author:["Einar Jerpseth"],title:"Tjenesteportef\xf8lje"},sidebar:"datadeling",previous:{title:"Teknisk beskrivelse av UiOs integrasjonsarkitektur",permalink:"/docs/datadeling/erfaringer/uio/om-uio-arkitekturmodell"},next:{title:"Styringsmodellen til UiO:IntArk",permalink:"/docs/datadeling/om/styringsmodellen/"}},a={},d=[{value:"Felter til bruk i tjenesteportef\xf8lje",id:"felter-til-bruk-i-tjenesteportef\xf8lje",level:2},{value:"Felter til bruk i tjenestekatalog",id:"felter-til-bruk-i-tjenestekatalog",level:2},{value:"Felter til bruk i tjenesteregister",id:"felter-til-bruk-i-tjenesteregister",level:2}];function g(e){const t={h2:"h2",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Her beskrives det\xa0hvilken informasjon som b\xf8r finnes i en tjenesteportef\xf8lje versus en tjenestekatalog for \xe5 underbygge god og kostnadseffektiv integrasjon. Dokumentet er veiledende og det oppfordres til \xe5 ha en pragmatisk holdning i vurderingen av hva som er praktisk informasjon og detaljeringsniv\xe5."}),"\n",(0,n.jsx)(t.p,{children:"I dette dokumentet er de fire termene tjenesteportef\xf8lje, tjenestekatalog, tjenesteoversikt og tjenesteregister definert som f\xf8lger:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"En tjenesteportef\xf8lje er et forvaltningsverkt\xf8y for flere tjenester under samme forvaltning. Dette gj\xf8res fordi tjenestene har et avhengighetsforhold til hverandre. Dette avhengighetsforholdet kan medf\xf8re at optimalisering av en tjeneste medf\xf8rer uplanlagt merarbeid hos andre, slik at totalen g\xe5r i minus. Form\xe5let med en tjenesteportef\xf8lje er alts\xe5 \xe5 f\xe5 forutsigbarhet mht. kostnader, leveringstider og ressursbruk for tjenestene i portef\xf8ljen under ett. Bruksomr\xe5det er internt."}),"\n",(0,n.jsx)(t.li,{children:"En tjenestekatalog er den delen av tjenesteportef\xf8ljen som virksomheten viser sine (potensielle) konsumenter. Essensiell informasjon i en tjenestekatalog er\xa0tjenestens innhold, kontaktpunkter og regler for bruk. En tjenestekatalog kan sy sammen informasjon fra flere tjenesteportef\xf8ljer, men en tjenesteportef\xf8lje kan ogs\xe5 ha flere tjenestekataloger. Dette avhenger av hvordan virksomheten opplever det mest hensiktsmessig \xe5 formidle informasjon om sine tjenester."}),"\n",(0,n.jsx)(t.li,{children:"En tjenesteoversikt er en opplisting av tjenester i en eller flere tjenestekataloger. Tjenestene er beskrevet sv\xe6rt overfladisk og normalt lenker tjenesteoversikten til den mer informasjonsrike tjenestekatalogen."}),"\n",(0,n.jsx)(t.li,{children:"Et tjenesteregister er en samling av dokumenterte integrasjonsgrensesnitt. Tjenesteregisteret er en del av tjenestekatalogen. Da informasjonen i registeret er detaljert og bare av interesse for utviklere, er denne delen av tjenestekatalogen trukket ut i en egen tjeneste. Et tjenesteregister kan igjen sy sammen eller segregere informasjon fra en eller flere tjenestekataloger."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Husk at dette er skrevet med fokus p\xe5 integrasjonsgrensesnitt (API). Det er p\xe5 ingen m\xe5te noen opplisting over generelle felter i en tjenesteportef\xf8lje/-katalog."}),"\n",(0,n.jsx)(t.h2,{id:"felter-til-bruk-i-tjenesteportef\xf8lje",children:"Felter til bruk i tjenesteportef\xf8lje"}),"\n",(0,n.jsx)(t.p,{children:"Tjenesteportef\xf8ljen trenger informasjon om API innen tre overordnede kategorier: forankring, forvaltning og validering.Detaljniv\xe5 kan variere mht. hva interessentene opplever som hensiktsmessig. Ofte vil hensikt og m\xe5l begrunnes p\xe5 et h\xf8yere niv\xe5 for tjenesten."}),"\n",(0,n.jsx)(t.p,{children:"Innen forankring b\xf8r det sies noe om hva hensikten med API er. Dette inkluderer kort- og langsiktige m\xe5l og m\xe5lekriterier. I vurdering av hensikt b\xf8r det ogs\xe5 inng\xe5 vurderinger som er gjort mht. legalitet/konfidensialitet, intendert m\xe5lgruppe og API-kategori. API-kategori vil si om API er ment for offentligheten eller internt, om det har en betalingsmodell, om det krever en registerering, er underlagt lovgivning eller annet. Om API er for strengt begrenset bruk (produsentens egne utviklere) er det ikke n\xf8dvendig for integrasjonsarkitekturen at det er oppf\xf8rt i tjenesteportef\xf8ljen. Systemeier kan allikevel \xf8nske oppf\xf8ring mht. dokumentasjon, budsjettering eller m\xe5ling av ressursbruk."}),"\n",(0,n.jsx)(t.p,{children:"Under forvaltning b\xf8r det v\xe6re:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Lenker til dokumentasjon rundt tekniske implementasjon. I det tekniske designet b\xf8r det v\xe6re gjort vurdering mht. gjenbruk, hvordan delte data holdes konsistente p\xe5 tvers av tjenester, samt i hvilken grad man det vil p\xe5virke konsumentene om man skiller ut funksjonalitet fra kildesystemet eller bytter kildesystem."}),"\n",(0,n.jsx)(t.li,{children:"Det b\xf8r v\xe6re beskrevet hvilke delegeringer som er gjort. F.eks. kan utviklere v\xe6re delegert rettighet til selv \xe5 utvikle mer funksjonalitet eller andre grupperinger kan v\xe6re delegert muligheten til \xe5 gi tilganger til systemeierens data. Sistnevnte skjer typisk i situasjoner hvor det er laget uttrekk sammensatt fra forskjellige kildesystemer og som er lagt under sentral forvaltning."}),"\n",(0,n.jsx)(t.li,{children:"Det b\xf8r beskrives eventuell juridiske forhold, f.eks. hvorvidt det kreves en databehandleravtale og hvorvidt denne er standardisert og elektronisk"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Validering av en tjeneste b\xf8r foreg\xe5 p\xe5 et tidspunkt planlagt da tjenesten sist ble validert. Vi skal ikke her gi noen fasit p\xe5 validering, men kan kort nevne at m\xe5loppn\xe5else, ROS-analyse, compliance med lovverk og interne f\xf8ringer, samt brukerunders\xf8kelser er vanlig tiltak i et valideringsprogram. Integrasjonsarkitekturen tilf\xf8rer et krav om validering av kvaliteten p\xe5 egne data. (Som oftest finner man at kvaliteten p\xe5 dataene er lavere enn antatt)."}),"\n",(0,n.jsx)(t.h2,{id:"felter-til-bruk-i-tjenestekatalog",children:"Felter til bruk i tjenestekatalog"}),"\n",(0,n.jsx)(t.p,{children:"Husk: All informasjon i tjenestekatalogen skal v\xe6re hentet fra tjenesteportef\xf8ljen. Det skal alts\xe5 ikke dukke opp nye informasjonsomr\xe5der; tjenestekatalogen skal tilrettelegge den informasjon som er relevant for konsumenten. Grovt sett kan API-informasjonen i tjenestekatalogen deles i overordnede forretningsmessige forhold og deres praktiske implikasjoner. Overgangen har en tendens til \xe5 v\xe6re gradvis. I tabellen under er dette illustrert:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Forretningsmessige forhold"}),(0,n.jsx)(t.th,{children:"Beskrivelse"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Masterdata"}),(0,n.jsx)(t.td,{children:"Beskrivelse av hvilke overordnede typer data kan man forvente \xe5 finne og hvordan dataene henger sammen med relevante data i andre tjenester"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Kategori"}),(0,n.jsx)(t.td,{children:"Dette feltet b\xf8r besvare sp\xf8rsm\xe5l som: Er API tilgjenglig for alle? Krever det registrering? Er det begrenset ved lovgivning? Er det en betalingstjeneste?"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:"Praktiske implikasjoner"})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Tilgang til API"}),(0,n.jsx)(t.td,{children:"Informasjon om hvor API er \xe5 finne og hvordan man f\xe5r tilgang. Lenker til standardisert avtaleverk."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Informasjon om kontraktsforhold"}),(0,n.jsx)(t.td,{children:"Dette er b\xe5de overordnet informasjon om hvilke lover og regler som gjelder. Det er ogs\xe5 informasjon av annen art, som l\xf8fter om ytelse og oppetid (SLA) eller i hvilken grad produsent forplikter seg til versjonering av sine API."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Dokumentasjon"}),(0,n.jsx)(t.td,{children:"Lenker til tekniske dokumentasjon eller annen informasjon som tjenestens forvaltningssyklus og valideringskriteria."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"felter-til-bruk-i-tjenesteregister",children:"Felter til bruk i tjenesteregister"}),"\n",(0,n.jsx)(t.p,{children:"I tjenesteregister m\xe5 det v\xe6re lenker til tjenestekatalog/-portef\xf8lje avhengig av APIs kategori eller utviklers rolle. (En tjenesteportef\xf8lje/-katalog er ofte samme programvare hvor tilgangen til informasjon er segregert p\xe5 rolle). Det b\xf8r ogs\xe5 v\xe6re lenker til utvidet teknisk informasjon. Videre kan det v\xe6re felt for egne kontaktpunkt for utviklere."})]})}function k(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(g,{...e})}):g(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>o});var n=r(6540);const s={},i=n.createContext(s);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);